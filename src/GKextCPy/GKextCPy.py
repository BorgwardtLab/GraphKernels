# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GKextCPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GKextCPy')
    _GKextCPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GKextCPy', [dirname(__file__)])
        except ImportError:
            import _GKextCPy
            return _GKextCPy
        try:
            _mod = imp.load_module('_GKextCPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GKextCPy = swig_import_helper()
    del swig_import_helper
else:
    import _GKextCPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GKextCPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _GKextCPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GKextCPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GKextCPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GKextCPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GKextCPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GKextCPy.SwigPyIterator_copy(self)

    def next(self):
        return _GKextCPy.SwigPyIterator_next(self)

    def __next__(self):
        return _GKextCPy.SwigPyIterator___next__(self)

    def previous(self):
        return _GKextCPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GKextCPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GKextCPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GKextCPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GKextCPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GKextCPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GKextCPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GKextCPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GKextCPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _GKextCPy.SHARED_PTR_DISOWN
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GKextCPy.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GKextCPy.IntVector___nonzero__(self)

    def __bool__(self):
        return _GKextCPy.IntVector___bool__(self)

    def __len__(self):
        return _GKextCPy.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _GKextCPy.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GKextCPy.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GKextCPy.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GKextCPy.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GKextCPy.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GKextCPy.IntVector___setitem__(self, *args)

    def pop(self):
        return _GKextCPy.IntVector_pop(self)

    def append(self, x):
        return _GKextCPy.IntVector_append(self, x)

    def empty(self):
        return _GKextCPy.IntVector_empty(self)

    def size(self):
        return _GKextCPy.IntVector_size(self)

    def swap(self, v):
        return _GKextCPy.IntVector_swap(self, v)

    def begin(self):
        return _GKextCPy.IntVector_begin(self)

    def end(self):
        return _GKextCPy.IntVector_end(self)

    def rbegin(self):
        return _GKextCPy.IntVector_rbegin(self)

    def rend(self):
        return _GKextCPy.IntVector_rend(self)

    def clear(self):
        return _GKextCPy.IntVector_clear(self)

    def get_allocator(self):
        return _GKextCPy.IntVector_get_allocator(self)

    def pop_back(self):
        return _GKextCPy.IntVector_pop_back(self)

    def erase(self, *args):
        return _GKextCPy.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _GKextCPy.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GKextCPy.IntVector_push_back(self, x)

    def front(self):
        return _GKextCPy.IntVector_front(self)

    def back(self):
        return _GKextCPy.IntVector_back(self)

    def assign(self, n, x):
        return _GKextCPy.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _GKextCPy.IntVector_resize(self, *args)

    def insert(self, *args):
        return _GKextCPy.IntVector_insert(self, *args)

    def reserve(self, n):
        return _GKextCPy.IntVector_reserve(self, n)

    def capacity(self):
        return _GKextCPy.IntVector_capacity(self)
    __swig_destroy__ = _GKextCPy.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _GKextCPy.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GKextCPy.IntIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GKextCPy.IntIntVector___nonzero__(self)

    def __bool__(self):
        return _GKextCPy.IntIntVector___bool__(self)

    def __len__(self):
        return _GKextCPy.IntIntVector___len__(self)

    def __getslice__(self, i, j):
        return _GKextCPy.IntIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GKextCPy.IntIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GKextCPy.IntIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GKextCPy.IntIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GKextCPy.IntIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GKextCPy.IntIntVector___setitem__(self, *args)

    def pop(self):
        return _GKextCPy.IntIntVector_pop(self)

    def append(self, x):
        return _GKextCPy.IntIntVector_append(self, x)

    def empty(self):
        return _GKextCPy.IntIntVector_empty(self)

    def size(self):
        return _GKextCPy.IntIntVector_size(self)

    def swap(self, v):
        return _GKextCPy.IntIntVector_swap(self, v)

    def begin(self):
        return _GKextCPy.IntIntVector_begin(self)

    def end(self):
        return _GKextCPy.IntIntVector_end(self)

    def rbegin(self):
        return _GKextCPy.IntIntVector_rbegin(self)

    def rend(self):
        return _GKextCPy.IntIntVector_rend(self)

    def clear(self):
        return _GKextCPy.IntIntVector_clear(self)

    def get_allocator(self):
        return _GKextCPy.IntIntVector_get_allocator(self)

    def pop_back(self):
        return _GKextCPy.IntIntVector_pop_back(self)

    def erase(self, *args):
        return _GKextCPy.IntIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _GKextCPy.new_IntIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GKextCPy.IntIntVector_push_back(self, x)

    def front(self):
        return _GKextCPy.IntIntVector_front(self)

    def back(self):
        return _GKextCPy.IntIntVector_back(self)

    def assign(self, n, x):
        return _GKextCPy.IntIntVector_assign(self, n, x)

    def resize(self, *args):
        return _GKextCPy.IntIntVector_resize(self, *args)

    def insert(self, *args):
        return _GKextCPy.IntIntVector_insert(self, *args)

    def reserve(self, n):
        return _GKextCPy.IntIntVector_reserve(self, n)

    def capacity(self):
        return _GKextCPy.IntIntVector_capacity(self)
    __swig_destroy__ = _GKextCPy.delete_IntIntVector
    __del__ = lambda self: None
IntIntVector_swigregister = _GKextCPy.IntIntVector_swigregister
IntIntVector_swigregister(IntIntVector)

class IntIntIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GKextCPy.IntIntIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GKextCPy.IntIntIntVector___nonzero__(self)

    def __bool__(self):
        return _GKextCPy.IntIntIntVector___bool__(self)

    def __len__(self):
        return _GKextCPy.IntIntIntVector___len__(self)

    def __getslice__(self, i, j):
        return _GKextCPy.IntIntIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GKextCPy.IntIntIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GKextCPy.IntIntIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GKextCPy.IntIntIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GKextCPy.IntIntIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GKextCPy.IntIntIntVector___setitem__(self, *args)

    def pop(self):
        return _GKextCPy.IntIntIntVector_pop(self)

    def append(self, x):
        return _GKextCPy.IntIntIntVector_append(self, x)

    def empty(self):
        return _GKextCPy.IntIntIntVector_empty(self)

    def size(self):
        return _GKextCPy.IntIntIntVector_size(self)

    def swap(self, v):
        return _GKextCPy.IntIntIntVector_swap(self, v)

    def begin(self):
        return _GKextCPy.IntIntIntVector_begin(self)

    def end(self):
        return _GKextCPy.IntIntIntVector_end(self)

    def rbegin(self):
        return _GKextCPy.IntIntIntVector_rbegin(self)

    def rend(self):
        return _GKextCPy.IntIntIntVector_rend(self)

    def clear(self):
        return _GKextCPy.IntIntIntVector_clear(self)

    def get_allocator(self):
        return _GKextCPy.IntIntIntVector_get_allocator(self)

    def pop_back(self):
        return _GKextCPy.IntIntIntVector_pop_back(self)

    def erase(self, *args):
        return _GKextCPy.IntIntIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _GKextCPy.new_IntIntIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GKextCPy.IntIntIntVector_push_back(self, x)

    def front(self):
        return _GKextCPy.IntIntIntVector_front(self)

    def back(self):
        return _GKextCPy.IntIntIntVector_back(self)

    def assign(self, n, x):
        return _GKextCPy.IntIntIntVector_assign(self, n, x)

    def resize(self, *args):
        return _GKextCPy.IntIntIntVector_resize(self, *args)

    def insert(self, *args):
        return _GKextCPy.IntIntIntVector_insert(self, *args)

    def reserve(self, n):
        return _GKextCPy.IntIntIntVector_reserve(self, n)

    def capacity(self):
        return _GKextCPy.IntIntIntVector_capacity(self)
    __swig_destroy__ = _GKextCPy.delete_IntIntIntVector
    __del__ = lambda self: None
IntIntIntVector_swigregister = _GKextCPy.IntIntIntVector_swigregister
IntIntIntVector_swigregister(IntIntIntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GKextCPy.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GKextCPy.FloatVector___nonzero__(self)

    def __bool__(self):
        return _GKextCPy.FloatVector___bool__(self)

    def __len__(self):
        return _GKextCPy.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _GKextCPy.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GKextCPy.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GKextCPy.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GKextCPy.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GKextCPy.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GKextCPy.FloatVector___setitem__(self, *args)

    def pop(self):
        return _GKextCPy.FloatVector_pop(self)

    def append(self, x):
        return _GKextCPy.FloatVector_append(self, x)

    def empty(self):
        return _GKextCPy.FloatVector_empty(self)

    def size(self):
        return _GKextCPy.FloatVector_size(self)

    def swap(self, v):
        return _GKextCPy.FloatVector_swap(self, v)

    def begin(self):
        return _GKextCPy.FloatVector_begin(self)

    def end(self):
        return _GKextCPy.FloatVector_end(self)

    def rbegin(self):
        return _GKextCPy.FloatVector_rbegin(self)

    def rend(self):
        return _GKextCPy.FloatVector_rend(self)

    def clear(self):
        return _GKextCPy.FloatVector_clear(self)

    def get_allocator(self):
        return _GKextCPy.FloatVector_get_allocator(self)

    def pop_back(self):
        return _GKextCPy.FloatVector_pop_back(self)

    def erase(self, *args):
        return _GKextCPy.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _GKextCPy.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GKextCPy.FloatVector_push_back(self, x)

    def front(self):
        return _GKextCPy.FloatVector_front(self)

    def back(self):
        return _GKextCPy.FloatVector_back(self)

    def assign(self, n, x):
        return _GKextCPy.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _GKextCPy.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _GKextCPy.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _GKextCPy.FloatVector_reserve(self, n)

    def capacity(self):
        return _GKextCPy.FloatVector_capacity(self)
    __swig_destroy__ = _GKextCPy.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _GKextCPy.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GKextCPy.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GKextCPy.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _GKextCPy.DoubleVector___bool__(self)

    def __len__(self):
        return _GKextCPy.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _GKextCPy.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GKextCPy.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GKextCPy.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GKextCPy.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GKextCPy.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GKextCPy.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _GKextCPy.DoubleVector_pop(self)

    def append(self, x):
        return _GKextCPy.DoubleVector_append(self, x)

    def empty(self):
        return _GKextCPy.DoubleVector_empty(self)

    def size(self):
        return _GKextCPy.DoubleVector_size(self)

    def swap(self, v):
        return _GKextCPy.DoubleVector_swap(self, v)

    def begin(self):
        return _GKextCPy.DoubleVector_begin(self)

    def end(self):
        return _GKextCPy.DoubleVector_end(self)

    def rbegin(self):
        return _GKextCPy.DoubleVector_rbegin(self)

    def rend(self):
        return _GKextCPy.DoubleVector_rend(self)

    def clear(self):
        return _GKextCPy.DoubleVector_clear(self)

    def get_allocator(self):
        return _GKextCPy.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _GKextCPy.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _GKextCPy.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _GKextCPy.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GKextCPy.DoubleVector_push_back(self, x)

    def front(self):
        return _GKextCPy.DoubleVector_front(self)

    def back(self):
        return _GKextCPy.DoubleVector_back(self)

    def assign(self, n, x):
        return _GKextCPy.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _GKextCPy.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _GKextCPy.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _GKextCPy.DoubleVector_reserve(self, n)

    def capacity(self):
        return _GKextCPy.DoubleVector_capacity(self)
    __swig_destroy__ = _GKextCPy.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _GKextCPy.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class VecMatrixXi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecMatrixXi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecMatrixXi, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GKextCPy.VecMatrixXi_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GKextCPy.VecMatrixXi___nonzero__(self)

    def __bool__(self):
        return _GKextCPy.VecMatrixXi___bool__(self)

    def __len__(self):
        return _GKextCPy.VecMatrixXi___len__(self)

    def __getslice__(self, i, j):
        return _GKextCPy.VecMatrixXi___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GKextCPy.VecMatrixXi___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GKextCPy.VecMatrixXi___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GKextCPy.VecMatrixXi___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GKextCPy.VecMatrixXi___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GKextCPy.VecMatrixXi___setitem__(self, *args)

    def pop(self):
        return _GKextCPy.VecMatrixXi_pop(self)

    def append(self, x):
        return _GKextCPy.VecMatrixXi_append(self, x)

    def empty(self):
        return _GKextCPy.VecMatrixXi_empty(self)

    def size(self):
        return _GKextCPy.VecMatrixXi_size(self)

    def swap(self, v):
        return _GKextCPy.VecMatrixXi_swap(self, v)

    def begin(self):
        return _GKextCPy.VecMatrixXi_begin(self)

    def end(self):
        return _GKextCPy.VecMatrixXi_end(self)

    def rbegin(self):
        return _GKextCPy.VecMatrixXi_rbegin(self)

    def rend(self):
        return _GKextCPy.VecMatrixXi_rend(self)

    def clear(self):
        return _GKextCPy.VecMatrixXi_clear(self)

    def get_allocator(self):
        return _GKextCPy.VecMatrixXi_get_allocator(self)

    def pop_back(self):
        return _GKextCPy.VecMatrixXi_pop_back(self)

    def erase(self, *args):
        return _GKextCPy.VecMatrixXi_erase(self, *args)

    def __init__(self, *args):
        this = _GKextCPy.new_VecMatrixXi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GKextCPy.VecMatrixXi_push_back(self, x)

    def front(self):
        return _GKextCPy.VecMatrixXi_front(self)

    def back(self):
        return _GKextCPy.VecMatrixXi_back(self)

    def assign(self, n, x):
        return _GKextCPy.VecMatrixXi_assign(self, n, x)

    def resize(self, *args):
        return _GKextCPy.VecMatrixXi_resize(self, *args)

    def insert(self, *args):
        return _GKextCPy.VecMatrixXi_insert(self, *args)

    def reserve(self, n):
        return _GKextCPy.VecMatrixXi_reserve(self, n)

    def capacity(self):
        return _GKextCPy.VecMatrixXi_capacity(self)
    __swig_destroy__ = _GKextCPy.delete_VecMatrixXi
    __del__ = lambda self: None
VecMatrixXi_swigregister = _GKextCPy.VecMatrixXi_swigregister
VecMatrixXi_swigregister(VecMatrixXi)


def selectLinearGaussian(h1, h2, sigma):
    return _GKextCPy.selectLinearGaussian(h1, h2, sigma)
selectLinearGaussian = _GKextCPy.selectLinearGaussian

def productMapping(e1, e2, v1_label, v2_label, H):
    return _GKextCPy.productMapping(e1, e2, v1_label, v2_label, H)
productMapping = _GKextCPy.productMapping

def productAdjacency(e1, e2, v1_label, v2_label, H):
    return _GKextCPy.productAdjacency(e1, e2, v1_label, v2_label, H)
productAdjacency = _GKextCPy.productAdjacency

def bucketsort(x, index, label_max):
    return _GKextCPy.bucketsort(x, index, label_max)
bucketsort = _GKextCPy.bucketsort

def edgeHistogramKernel(e1, e2, sigma):
    return _GKextCPy.edgeHistogramKernel(e1, e2, sigma)
edgeHistogramKernel = _GKextCPy.edgeHistogramKernel

def vertexHistogramKernel(v1_label, v2_label, sigma):
    return _GKextCPy.vertexHistogramKernel(v1_label, v2_label, sigma)
vertexHistogramKernel = _GKextCPy.vertexHistogramKernel

def vertexEdgeHistogramKernel(e1, e2, v1_label, v2_label, sigma):
    return _GKextCPy.vertexEdgeHistogramKernel(e1, e2, v1_label, v2_label, sigma)
vertexEdgeHistogramKernel = _GKextCPy.vertexEdgeHistogramKernel

def vertexVertexEdgeHistogramKernel(e1, e2, v1_label, v2_label, arg5):
    return _GKextCPy.vertexVertexEdgeHistogramKernel(e1, e2, v1_label, v2_label, arg5)
vertexVertexEdgeHistogramKernel = _GKextCPy.vertexVertexEdgeHistogramKernel

def geometricRandomWalkKernel(e1, e2, v1_label, v2_label, arg5):
    return _GKextCPy.geometricRandomWalkKernel(e1, e2, v1_label, v2_label, arg5)
geometricRandomWalkKernel = _GKextCPy.geometricRandomWalkKernel

def exponentialRandomWalkKernel(e1, e2, v1_label, v2_label, beta):
    return _GKextCPy.exponentialRandomWalkKernel(e1, e2, v1_label, v2_label, beta)
exponentialRandomWalkKernel = _GKextCPy.exponentialRandomWalkKernel

def kstepRandomWalkKernel(e1, e2, v1_label, v2_label, lambda_list):
    return _GKextCPy.kstepRandomWalkKernel(e1, e2, v1_label, v2_label, lambda_list)
kstepRandomWalkKernel = _GKextCPy.kstepRandomWalkKernel

def WLKernelMatrix(E, V_label, num_v, num_e, degree_max, h_max):
    return _GKextCPy.WLKernelMatrix(E, V_label, num_v, num_e, degree_max, h_max)
WLKernelMatrix = _GKextCPy.WLKernelMatrix

def computeKernelValue(e1, e2, v1_label, v2_label, par, kernel_type):
    return _GKextCPy.computeKernelValue(e1, e2, v1_label, v2_label, par, kernel_type)
computeKernelValue = _GKextCPy.computeKernelValue

def CalculateKernelPy(E, V_label, V_count, E_count, D_max, par, kernel_type):
    return _GKextCPy.CalculateKernelPy(E, V_label, V_count, E_count, D_max, par, kernel_type)
CalculateKernelPy = _GKextCPy.CalculateKernelPy

def find_min(a, b, c):
    return _GKextCPy.find_min(a, b, c)
find_min = _GKextCPy.find_min

def card_ThreeInter(L1, L2, L3, card):
    return _GKextCPy.card_ThreeInter(L1, L2, L3, card)
card_ThreeInter = _GKextCPy.card_ThreeInter

def getIndices(o_set1, o_set2, inter, diff1, diff2):
    return _GKextCPy.getIndices(o_set1, o_set2, inter, diff1, diff2)
getIndices = _GKextCPy.getIndices

def countGraphletsFour(al, count_gr):
    return _GKextCPy.countGraphletsFour(al, count_gr)
countGraphletsFour = _GKextCPy.countGraphletsFour

def getCardinality(o_set1, o_set2, card):
    return _GKextCPy.getCardinality(o_set1, o_set2, card)
getCardinality = _GKextCPy.getCardinality

def countGraphletsThree(al, count_gr):
    return _GKextCPy.countGraphletsThree(al, count_gr)
countGraphletsThree = _GKextCPy.countGraphletsThree

def getMinValue(iam, idx, sums):
    return _GKextCPy.getMinValue(iam, idx, sums)
getMinValue = _GKextCPy.getMinValue

def countConnectedGraphletsFive(am, al, count_gr):
    return _GKextCPy.countConnectedGraphletsFive(am, al, count_gr)
countConnectedGraphletsFive = _GKextCPy.countConnectedGraphletsFive

def countConnectedGraphletsFour(am, al, count_gr):
    return _GKextCPy.countConnectedGraphletsFour(am, al, count_gr)
countConnectedGraphletsFour = _GKextCPy.countConnectedGraphletsFour

def countConnectedGraphletsThree(am, al, count_gr):
    return _GKextCPy.countConnectedGraphletsThree(am, al, count_gr)
countConnectedGraphletsThree = _GKextCPy.countConnectedGraphletsThree

def CalculateGraphletKernelPy(graph_adj_all, graph_adjlist_all, k):
    return _GKextCPy.CalculateGraphletKernelPy(graph_adj_all, graph_adjlist_all, k)
CalculateGraphletKernelPy = _GKextCPy.CalculateGraphletKernelPy

def CalculateConnectedGraphletKernelPy(graph_adj_all, graph_adjlist_all, k):
    return _GKextCPy.CalculateConnectedGraphletKernelPy(graph_adj_all, graph_adjlist_all, k)
CalculateConnectedGraphletKernelPy = _GKextCPy.CalculateConnectedGraphletKernelPy
# This file is compatible with both classic and new-style classes.


